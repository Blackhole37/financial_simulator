name: Deploy to Render

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  PYTHON_VERSION: '3.11'

jobs:
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Validate deployment readiness
      run: |
        echo "🔍 Validating deployment readiness..."
        
        # Check that required files exist
        if [ ! -f "Backend/Financial_simulator/requirements.txt" ]; then
          echo "❌ requirements.txt not found"
          exit 1
        fi
        
        if [ ! -f "Backend/Financial_simulator/start_free_tier.py" ]; then
          echo "❌ start_free_tier.py not found"
          exit 1
        fi
        
        if [ ! -f "render-free-tier.yaml" ]; then
          echo "❌ render-free-tier.yaml not found"
          exit 1
        fi
        
        echo "✅ All required deployment files found"
        
    - name: Test syntax before deployment
      run: |
        echo "🧪 Running final syntax check..."
        python -m py_compile Backend/Financial_simulator/Financial_simulator/langgraph_implementation.py
        python -m py_compile Backend/Financial_simulator/Financial_simulator/langgraph_api.py
        echo "✅ Syntax check passed"
        
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        echo "🚀 Deploying to Render..."
        
        if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
          echo "⚠️ Render credentials not configured. Skipping deployment."
          echo "To enable deployment, add RENDER_API_KEY and RENDER_SERVICE_ID to GitHub secrets."
          exit 0
        fi
        
        # Trigger deployment
        response=$(curl -s -w "%{http_code}" -X POST \
          -H "Authorization: Bearer $RENDER_API_KEY" \
          -H "Content-Type: application/json" \
          "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
          -d '{"clearCache": false}')
        
        http_code="${response: -3}"
        response_body="${response%???}"
        
        if [ "$http_code" -eq 201 ]; then
          echo "✅ Deployment triggered successfully!"
          echo "Response: $response_body"
        else
          echo "❌ Deployment failed with HTTP code: $http_code"
          echo "Response: $response_body"
          exit 1
        fi
        
    - name: Wait for deployment
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        if [ -z "$RENDER_API_KEY" ] || [ -z "$RENDER_SERVICE_ID" ]; then
          echo "⚠️ Skipping deployment status check"
          exit 0
        fi
        
        echo "⏳ Waiting for deployment to complete..."
        
        for i in {1..30}; do
          sleep 30
          
          status=$(curl -s \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID" | \
            jq -r '.service.serviceDetails.deployStatus // "unknown"')
          
          echo "Deployment status: $status"
          
          case $status in
            "live")
              echo "✅ Deployment completed successfully!"
              break
              ;;
            "build_failed"|"deploy_failed")
              echo "❌ Deployment failed!"
              exit 1
              ;;
            "unknown")
              echo "⚠️ Could not determine deployment status"
              ;;
            *)
              echo "🔄 Deployment in progress..."
              ;;
          esac
          
          if [ $i -eq 30 ]; then
            echo "⏰ Deployment timeout - check Render dashboard"
            exit 1
          fi
        done
        
    - name: Test deployed service
      run: |
        echo "🧪 Testing deployed service..."
        
        # Get service URL (you may need to set this as a secret or environment variable)
        SERVICE_URL="${{ secrets.RENDER_SERVICE_URL || 'https://financial-simulator.onrender.com' }}"
        
        # Wait a bit for service to be fully ready
        sleep 60
        
        # Test health endpoint
        for i in {1..5}; do
          if curl -f -s "$SERVICE_URL/health" > /dev/null; then
            echo "✅ Service is responding at $SERVICE_URL"
            break
          else
            echo "⏳ Waiting for service to respond... (attempt $i/5)"
            sleep 30
          fi
          
          if [ $i -eq 5 ]; then
            echo "❌ Service not responding after deployment"
            exit 1
          fi
        done
        
    - name: Notify deployment success
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "🌐 Service URL: ${{ secrets.RENDER_SERVICE_URL || 'https://financial-simulator.onrender.com' }}"
        echo "📊 Health Check: ${{ secrets.RENDER_SERVICE_URL || 'https://financial-simulator.onrender.com' }}/health"
        echo "📚 API Docs: ${{ secrets.RENDER_SERVICE_URL || 'https://financial-simulator.onrender.com' }}/docs"
