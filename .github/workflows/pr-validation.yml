name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: Quick Syntax Check (fails fast if syntax errors)
  syntax-check:
    name: 🔍 Syntax Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Quick syntax validation
      run: |
        echo "🔍 Running quick syntax check..."
        
        # This will catch the indentation error we fixed
        python -c "
        import ast
        import sys
        
        files_to_check = [
            'Backend/Financial_simulator/Financial_simulator/langgraph_implementation.py',
            'Backend/Financial_simulator/Financial_simulator/langgraph_api.py',
            'Backend/api_data/api.py',
            'Backend/pipline-24-master/app.py',
            'Backend/tts_service/tts.py'
        ]
        
        syntax_errors = []
        
        for file_path in files_to_check:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    source_code = f.read()
                ast.parse(source_code)
                print(f'✅ {file_path} - syntax OK')
            except (SyntaxError, IndentationError) as e:
                error_msg = f'{file_path} at line {e.lineno}: {e.msg}'
                syntax_errors.append(error_msg)
                print(f'❌ {error_msg}')
            except FileNotFoundError:
                print(f'⚠️ {file_path} - file not found (skipping)')
        
        if syntax_errors:
            print(f'\\n❌ Found {len(syntax_errors)} syntax errors:')
            for error in syntax_errors:
                print(f'  - {error}')
            sys.exit(1)
        else:
            print('\\n✅ All files passed syntax check!')
        "
        
    - name: Check for indentation issues
      run: |
        echo "🔍 Checking for mixed indentation..."
        
        python -c "
        import sys
        
        files_to_check = [
            'Backend/Financial_simulator/Financial_simulator/langgraph_implementation.py',
            'Backend/Financial_simulator/Financial_simulator/langgraph_api.py'
        ]
        
        mixed_indentation_files = []
        
        for file_path in files_to_check:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                mixed_lines = []
                for i, line in enumerate(lines, 1):
                    if line.strip():  # Skip empty lines
                        leading_ws = line[:len(line) - len(line.lstrip())]
                        if '\\t' in leading_ws and ' ' in leading_ws:
                            mixed_lines.append(i)
                
                if mixed_lines:
                    mixed_indentation_files.append((file_path, mixed_lines))
                    print(f'❌ {file_path} has mixed tabs/spaces at lines: {mixed_lines[:5]}...')
                else:
                    print(f'✅ {file_path} - indentation OK')
                    
            except FileNotFoundError:
                print(f'⚠️ {file_path} - file not found (skipping)')
        
        if mixed_indentation_files:
            print(f'\\n❌ Found mixed indentation in {len(mixed_indentation_files)} files')
            sys.exit(1)
        else:
            print('\\n✅ All files have consistent indentation!')
        "

  # Job 2: Run Tests
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: syntax-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r Backend/Financial_simulator/requirements.txt
        
    - name: Run syntax validation tests
      run: |
        echo "🧪 Running syntax validation tests..."
        cd Backend/Financial_simulator
        python -m pytest tests/test_syntax_validation.py -v
        
    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        cd Backend/Financial_simulator
        python -m pytest tests/test_financial_simulator.py -v

  # Job 3: Code Quality
  code-quality:
    name: 📊 Code Quality
    runs-on: ubuntu-latest
    needs: syntax-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run flake8
      run: |
        echo "🧹 Running flake8..."
        flake8 Backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Check code formatting
      run: |
        echo "🎨 Checking code formatting..."
        black --check --diff Backend/ || echo "Code formatting issues found"

  # Job 4: PR Summary
  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [syntax-check, test, code-quality]
    if: always()
    
    steps:
    - name: PR Validation Summary
      run: |
        echo "## 📋 PR Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.syntax-check.result }}" == "success" ]; then
          echo "✅ **Syntax Check**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Syntax Check**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ **Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ **Code Quality**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Code Quality**: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Fixed Issues" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ IndentationError in langgraph_implementation.py line 982 fixed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Proper try-except block structure implemented" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Consistent 4-space indentation throughout" >> $GITHUB_STEP_SUMMARY
        
        # Set overall status
        if [ "${{ needs.syntax-check.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Overall Status**: READY TO MERGE" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚫 **Overall Status**: NEEDS FIXES" >> $GITHUB_STEP_SUMMARY
        fi
